<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>coding on toso</title><link>https://victortoso.com/categories/coding/</link><description>Recent content in coding on toso</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 01 Jan 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://victortoso.com/categories/coding/index.xml" rel="self" type="application/rss+xml"/><item><title>Generating Cgo for libvirt</title><link>https://victortoso.com/code/generating-cgo-code/</link><pubDate>Sun, 01 Jan 2023 00:00:00 +0000</pubDate><guid>https://victortoso.com/code/generating-cgo-code/</guid><description>Preface The libvirt-go-module project provides Go bindings to use libvirt&amp;rsquo;s library. It wraps libvirt&amp;rsquo;s C types and APIs into Go types and methods. The wrapping involves writing a bit of Cgo code that looks like the following:
759 760 761 762 763 764 765 766 767 768 769 /* connect_wrapper.go from libvirt-go-module version v1.8009.0 */ virConnectPtr virConnectOpenWrapper(const char *name, virErrorPtr err) { virConnectPtr ret = virConnectOpen(name); if (!ret) { virCopyLastError(err); } return ret; } In this example, we are calling libvirt&amp;rsquo;s virConnectOpen() to stablish connection with the underlying hypervisor.</description></item></channel></rss>