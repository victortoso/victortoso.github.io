<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Victor Toso</title>
        <link>https%3A//victortoso.com</link>
        <description>Nothing relevant</description>
        <generator>Zola</generator>
        <language>en</language>
        <atom:link href="https%3A//victortoso.com/tags/acoustid/rss.xml" rel="self" type="application/rss+xml"/>
        <lastBuildDate>Tue, 15 Jul 2014 00:00:00 +0000</lastBuildDate>
        
            <item>
                <title>GSoC Report #6 and #7</title>
                <pubDate>Tue, 15 Jul 2014 00:00:00 +0000</pubDate>
                <link>https%3A//victortoso.com/blog-1407/</link>
                <guid>https%3A//victortoso.com/blog-1407/</guid>
                <description>&lt;h2 id=&quot;tuesday&quot;&gt;Tuesday...&lt;&#x2F;h2&gt;
&lt;p&gt;Two weeks without posting again! Can I use as an excuse &lt;a href=&quot;http:&#x2F;&#x2F;sadbrazilians.tumblr.com&#x2F;&quot;&gt;my
grief&lt;&#x2F;a&gt; for Brazil in this World Cup!?
:) Well, actually I was somewhat busy studying... I&#x27;ll share what in a
moment.&lt;&#x2F;p&gt;
&lt;p&gt;In order to talk about what I&#x27;m working on I would like to explain one
interesting feature that Grilo has.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;cool-thing-in-grilo&quot;&gt;Cool thing in Grilo?&lt;&#x2F;h2&gt;
&lt;p&gt;You may know that Grilo uses plugins to fetch useful data to your
application! Great. What you may not know is that Grilo can combine the
use of its plugins to resolve what the application want!&lt;&#x2F;p&gt;
&lt;p&gt;Let me explain.&lt;&#x2F;p&gt;
&lt;p&gt;The TVDB can provide tons of interesting metadata for your TV Shows but
to do so, It needs some keys in order to find your TV Show in its
database like the name of the show the season and the episode that you
are watching.&lt;&#x2F;p&gt;
&lt;p&gt;Cool thing that there is a Grilo plugin called local-metadata which try
to get as much data as possible from the file name. For instance, It is
easy to local-metadata to gather all metadata necessary to The TVDB from
files like:&lt;&#x2F;p&gt;
&lt;p&gt;Boardwalk.Empire.S04E01.HDTV.x264-2HD.mp4; Adventure Time - 2x01 - It
Came from the Nightosphere.mp4 etc...&lt;&#x2F;p&gt;
&lt;h2 id=&quot;musicbrainz&quot;&gt;MusicBrainz&lt;&#x2F;h2&gt;
&lt;p&gt;Well, I&#x27;ll be working in a &lt;a href=&quot;https:&#x2F;&#x2F;musicbrainz.org&#x2F;&quot;&gt;MusicBrainz&lt;&#x2F;a&gt;
plugin to Grilo which will be very useful for several applications
indeed. But from a music file, how you identify Author, Artist or
anything?&lt;&#x2F;p&gt;
&lt;p&gt;One cool way is checking the audio fingerprint!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;acoustid.org&#x2F;&quot;&gt;AcoustID&lt;&#x2F;a&gt; has an Open database accessible through
a webservice to get the MusicBrainz Track ID from your audio
fingerprint!&lt;&#x2F;p&gt;
&lt;p&gt;So, this is pretty much similar of the example above with the TVDB and
local-metadata. The AcoustID will provide the MusicBrainz ID of the
track and the MusicBrainz plugin will use this to get all metadata
necessary. Cool, right?&lt;&#x2F;p&gt;
&lt;p&gt;Out of curiosity I read this awesome blog post which explains how the
fingerprint are calculated and how the AcoustID use that to search in
its database. &lt;a href=&quot;https:&#x2F;&#x2F;oxygene.sk&#x2F;2011&#x2F;01&#x2F;how-does-chromaprint-work&#x2F;&quot;&gt;Check it
out!&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;acoustid-1-2&quot;&gt;AcoustID 1&#x2F;2&lt;&#x2F;h2&gt;
&lt;p&gt;So, in order to generate the fingerprint as AcoustID needs, It is
necessary to read the entire music file while providing the raw data to
the chromaprint library.&lt;&#x2F;p&gt;
&lt;p&gt;My first attempt to do that was using the libraries of ffmpeg as I
already had some background with it and also a
&lt;a href=&quot;https:&#x2F;&#x2F;bitbucket.org&#x2F;acoustid&#x2F;chromaprint&#x2F;src&#x2F;master&#x2F;examples&#x2F;fpcalc.c&quot;&gt;functional-example&lt;&#x2F;a&gt;
in hands.&lt;&#x2F;p&gt;
&lt;p&gt;Of course it was a bad decision to implement such thing without talking
with Bastien first :)&lt;&#x2F;p&gt;
&lt;p&gt;He has explained a bit of the problems of having ffmpeg as dependency...&lt;&#x2F;p&gt;
&lt;h2 id=&quot;acoustid-2-2&quot;&gt;AcoustID 2&#x2F;2&lt;&#x2F;h2&gt;
&lt;p&gt;Then I started doing one thing that I was postponing for some time:
learning &lt;a href=&quot;http:&#x2F;&#x2F;gstreamer.freedesktop.org&#x2F;&quot;&gt;GStreamer&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I read the
&lt;a href=&quot;http:&#x2F;&#x2F;gstreamer.freedesktop.org&#x2F;data&#x2F;doc&#x2F;gstreamer&#x2F;head&#x2F;manual&#x2F;html&quot;&gt;manual&lt;&#x2F;a&gt;
and in its examples in order to understand how it works and what would
be the best way to implement the AcoustID.&lt;&#x2F;p&gt;
&lt;p&gt;In the end, there was already a &lt;a href=&quot;https:&#x2F;&#x2F;oxygene.sk&#x2F;2011&#x2F;01&#x2F;chromaprint-plug-in-for-gstreamer&#x2F;&quot;&gt;Chromaprint
plugin&lt;&#x2F;a&gt;!&lt;&#x2F;p&gt;
&lt;p&gt;The result is smaller but faster application then my previous work with
ffmpeg :-)&lt;&#x2F;p&gt;
&lt;p&gt;You can check the current AcoustID plugin
&lt;a href=&quot;https:&#x2F;&#x2F;bugzilla.gnome.org&#x2F;show_bug.cgi?id=732879&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;okay-and-what-about-that-gnome-video-ui&quot;&gt;Okay and what about that GNOME Video UI&lt;&#x2F;h2&gt;
&lt;p&gt;Well, yes. I&#x27;m trying.&lt;&#x2F;p&gt;
&lt;p&gt;The current code &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;victortoso&#x2F;totem-tvshows&quot;&gt;is here&lt;&#x2F;a&gt;,
seriously, I want to make this work with CSS but somehow it is not
working properly.&lt;&#x2F;p&gt;
&lt;p&gt;For instance, I can change the attributes for all GtkLabel but I can&#x27;t
change a specific GtkLabel alone.&lt;&#x2F;p&gt;
&lt;p&gt;I can&#x27;t tell how glad I was after checking the GUADEC schedule and see
the &amp;quot;GTK and CSS&amp;quot; talk from Benjamin Otte. I&#x27;ll be there, for
sure!&lt;&#x2F;p&gt;
&lt;p&gt;I think that&#x27;s all folks,&lt;&#x2F;p&gt;
</description>
            </item>
        
    </channel>
</rss>
